/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013 Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page examples-primitives Primitives
@brief Creating meshes from imported data, basic input handling.

-   Previous example: @ref examples-triangle
-   Next example: @ref examples-textured-triangle

@image html primitives/primitives.png
@image latex primitives/primitives.png

@tableofcontents

This example shows how to create indexed meshes from imported data and do some
basic user interaction, introducing these new features:
-   Interleaving vertex data and compressing indices for better performance.
-   Basic 3D transformations and perspective projection.
-   Mouse event handling.

This example displays colored cube and the user will be able to rotate it using
mouse and change its color.

@section examples-primitives-setup Setting up and preparing the mesh

In our class we now need two buffers instead of one and additionaly for user
interactivity we need to implement mouse event handlers and store
transformation, projection matrices and current color.
@dontinclude primitives/PrimitivesExample.cpp
@skip class PrimitivesExample
@until };

Because we are displaying 3D scene, we need to enable depth test to have the
cube rendered in proper Z-order. Enabling face culling is not needed for proper
rendering, but it will speed things up as only front-facing faces will be
rendered.
@skip PrimitivesExample::PrimitivesExample
@until Renderer::setFeature(Renderer::Feature::FaceCulling

We now use pre-made cube primitive and create mesh data from it. In most meshes
the same data are shared among more than one vertex, for example a square
consists of two triangles sharing the adjacent vertices. To save precious GPU
memory, the mesh can be indexed, i.e. containing buffer with unique vertex data
and index buffer telling which data belong to given vertex. Most meshes also
don't need full 32-bit range to index vertex data -- our mesh has only 36
unique vertices, thus 8-bit range is large enough. @ref MeshTools::compressIndices()
does all the boring work for us -- checks vertex count and based on that
creates index array consisting of @ref UnsignedByte, @ref UnsignedShort or
@ref UnsignedInt. It then fills the buffer with the data, adds it to the mesh
and configures index parameters, so we don't need to do anything else.
@skip Trade::MeshData3D
@until MeshTools::compressIndices

To realistically render the cube, we need also normals next to vertex
positions. We will interleave them using @ref MeshTools::interleave(). The
function takes list of arrays to interleave and then fills the buffer with
them. However, it doesn't know anything about the purpose of the data, so it
only sets vertex count and we then need to set mesh primitive and specify
attribute bindings for the shader.
@skip MeshTools::interleave
@until Shaders::Phong

We now specify initial transformation, color and projection. The projection
depends on viewport aspect ratio, thus we need to set it again when viewport
changes, i.e. in `viewportEvent()` function. See also @ref matrix-vector and
@ref transformations for more thorough introduction to transformations.
@skip transformation =
@until }
@until }
@until }

@section examples-primitives-rendering Rendering

In draw event we clear the framebuffer (don't forget to clear also depth
buffer), set transformation, normal and projection matrices and all material
parameters and draw the mesh.
@skip void PrimitivesExample::drawEvent
@until }
@until }

@section examples-primitives-events Mouse event handling

Event handling is also nothing complicated, on every click (press + release) we
change color hue to some other and on mouse drag we rotate the object based on
relative mouse position to previous event.
@skip void PrimitivesExample::mousePressEvent
@until }
@until }
@until }

@section examples-primitives-compilation Compilation

Compilation is pretty straigtforward. We now need some additional libraries,
like MeshTools and Primitives, otherwise everything is the same as ever:
@dontinclude primitives/CMakeLists.txt
@skip find_package(Magnum REQUIRED
@until ${MAGNUM_GLUTAPPLICATION_LIBRARIES})

-   @ref primitives/PrimitivesExample.cpp
-   @ref primitives/CMakeLists.txt

As an task you can try using another primitive from Primitives namespace.

-   Next example: @ref examples-textured-triangle

*/
}
