/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page examples-triangle Your first triangle
@brief Basic rendering with builtin shaders.

-   Next example: @ref examples-primitives

@image html triangle/triangle.png
@image latex triangle/triangle.png

For the first example we will use the simple GLUT toolkit, which is available
on most platforms. Support for it is in @ref Platform::GlutApplication class.
We subclass it and next to the constructor we implement the one required
function which is needed for rendering into the window. You can read more about
platform support and various portability tricks in @ref platform.

We also need @ref Mesh encapsulating our triangle, @ref Buffer to store vertex
data and @ref Shaders::Flat "shader" which will take care of rendering.
@dontinclude triangle/TriangleExample.cpp
@skip class TriangleExample
@until };

In the constructor we pass necessary arguments to the application class.
@skipline TriangleExample::TriangleExample

Now we specify vertex attributes, consisting of positions and colors. For
performance reasons it is common to interleave them, so data for each vertex
are in one continuous place in memory. We will cheat a bit here and use
@ref Vector3 for both 3D positions and RGB colors, so we can interleave them
easily in place. In the following tutorial we will learn how to interleave them
programatically. See @ref types for more information about scalar and vector
types used in %Magnum.
@skip data
@until };

We then create vertex buffer and fill it with the data. The data won't be
changed or read back into main memory during application lifetime, so we mark
them with appropriate @ref BufferUsage "buffer usage".
@skip Buffer
@until setData

Now we configure the mesh - we specify @ref MeshPrimitive "mesh primitive" and
vertex count, add vertex buffer and specify attribute locations for use with
the shader. We need to describe physical location of vertex attributes in the
buffer - zero offset from the beginning, first the position, then the color
with no gaps in between.
@skip mesh.
@until }
@note Setters in most %Magnum classes are implemented in a way which allows
    @ref method-chaining "method chaining" - so you don't have to write
    repeated code.

Function @ref Platform::GlutApplication::drawEvent() "drawEvent()" will take
care of rendering the scene. We will clear color buffer of the default
framebuffer (which is also the default rendering target) and then we draw the
mesh using our shader. The context is double-buffered, so we need to swap the
buffers after drawing.
@skip TriangleExample::drawEvent
@until }

-   @ref triangle/TriangleExample.cpp

That's all, now we can compile the whole example using CMake. First we find
required `%Magnum` package with `%Shaders` and `GlutApplication` component and
add include dirs for both core library and application to include path. It's
recommended to use also Corrade's set of compiler flags to enable additional
warnings. Then we collect our source files, create our executable and link to
all %Magnum libraries we requested. See @ref cmake for more information.
@dontinclude triangle/CMakeLists.txt
@skip find_package
@until MAGNUM_APPLICATION_LIBRARIES})

-   @ref triangle/CMakeLists.txt

You can now try changing vertex count, positions or colors to see how the
shader behaves.

-   Next example: @ref examples-primitives

*/
}
