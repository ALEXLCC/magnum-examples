namespace Magnum {
/** @page examples-textured-triangle Textured triangle
@brief Texturing, compiled-in resources, shader uniforms and mesh tools.

- Previous example: @ref examples-triangle
- Next example: @ref examples-cubemap

@image html textured-triangle/textured-triangle.png
@image latex textured-triangle/textured-triangle.png

@tableofcontents

This example extends the basic @ref examples-triangle "Triangle example" with
these features:
 - Using Corrade::PluginManager::PluginManager to load
   Trade::TgaImporter::TgaImporter and import the texture with it.
 - Storing shader sources and the texture in the executable using
   Corrade::Utility::Resource, so they don't have to be carried as separate
   files.
 - Using textures and managing texture and other uniforms in the shader.
 - Using MeshTools for easier creation of mesh data.

@section examples-textured-triangle-setup Setting up and loading the texture

The basic skeleton of main example class remains similar to previous example,
except for added texture.
@dontinclude textured-triangle/TexturedTriangleExample.h
@skip class TexturedTriangle
@until };

In the constructor we now have two data arrays - one containing all vertex
positions and the other containing texture coordinates. We then use
MeshTools::interleave() which interleaves them together (first position, then
texture coordinates) and fills the buffer with the result. You may think that
is is possible to have them interleaved from the beginning (such as using
array of `GLfloat`s), but sometimes it is inconvenient or not possible (e.g.
when loading the data from a file).
@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip TexturedTriangleExample::TexturedTriangleExample
@until textureCoordinates);

We then configure mesh primitive and vertex yount, add our vertex buffer and
specify attribute locations for use with our shader:
@skipline mesh
@until addInterleavedVertexBuffer

Now we will instantiate the plugin manager with plugin directory, which is
provided by CMake in `MAGNUM_PLUGINS_IMPORTER_DIR` (explained later) and try
to load TgaImporter plugin. If the plugin cannot be loaded or instantiated, we
print error message and exit immediately.
@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip Corrade::PluginManager::PluginManager
@until }

Now we need to load the texture. As advertised above, the texture is stored
as resource in the executable. The resource data will be compiled into source
file using CMake later. We access the resource and load the texture image
using the plugin:
@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip Corrade::Utility::Resource
@until }

After the image is loaded, we create texture from it. Note that we have to
explicitly set all texture parameters, otherwise the texture will be
incomplete.
@skip texture.setWrapping
@until ;
@note Setters in most %Magnum classes are implemented in a way which allows
    [method chaining](http://en.wikipedia.org/wiki/Method_chaining) - so you
    don't have to write repeated code.

The importer is now not needed and we can delete it. If we wouldn't do that,
next to the obvious memory leak of the instance and data of opened image the
plugin manager will not be able to unload the plugin, which could cause
problems later when trying to load the plugin again.
@skip delete importer
@until }

The drawing function is again fairly simple. We clear the buffer, set base
color to light red, mark the shader for usage and bind texture to the desired
layer (defined in `TexturedTriangleShader`, which is explained later) and
perform the drawing. Last thing is again buffer swap.
@skip TexturedTriangleExample::drawEvent
@until }
@until }

 - @ref textured-triangle/TexturedTriangleExample.h
 - @ref textured-triangle/TexturedTriangleExample.cpp

@section examples-textured-triangle-shader Textured triangle shader

%Shader for textured triangle takes now vertex position and two-dimensional
texture coordinates. Next to these two attributes it now also needs uniform
for base color and texture layer. For the color uniform we provide public
setter function, texture layer uniform will be set to fixed value specified
with `TextureLayer` constant. Good practice is to allow method chaining on
uniform setters.
@dontinclude textured-triangle/TexturedTriangleShader.h
@skip class TexturedTriangleShader
@until };

In the constructor we load GLSL sources from compiled-in resources, attach
and link and then retrieve location for the base color uniform. Then we set
texture layer uniform to fixed value, so it doesn't have to be set manually
when using the shader for rendering. With OpenGL 4.2 we can also set it
explicitly inside the shader itself, see @ref AbstractShaderProgram-texture-layer.
@dontinclude textured-triangle/TexturedTriangleShader.cpp
@skip TexturedTriangleShader::TexturedTriangleShader
@until }

 - @ref textured-triangle/TexturedTriangleShader.h
 - @ref textured-triangle/TexturedTriangleShader.cpp
 - @ref textured-triangle/TexturedTriangleShader.vert
 - @ref textured-triangle/TexturedTriangleShader.frag

@section examples-textured-triangle-compilation Compilation

Compilation is not as straightforward as in previous example, because we need
to get directory with importer plugins and compile the resources into
executable.

@dontinclude textured-triangle/CMakeLists.txt
@skip find_package
@until include_directories

First we find required %Magnum package and use its include dir. We also need
to include current binary dir, because it will contain our generated
`configure.h`. We create it from template `configure.h.cmake` with these
contents:

@include textured-triangle/configure.h.cmake

We then process it with CMake, which will replace
`${MAGNUM_PLUGINS_IMPORTER_DIR}` with path gathered when looking for %Magnum.

@dontinclude textured-triangle/CMakeLists.txt
@skip configure_file
@until ${CMAKE_CURRENT_BINARY_DIR}/configure.h

Now we compile the resources using `corrade_add_resource()` macro. Important
thing is to use the same resource name as when we were accessing them above
(`data`). Then we create executable from the result and other source files.
Last step is linking, the same as previously.

@dontinclude textured-triangle/CMakeLists.txt
@skip corrade_add_resource
@until ${MAGNUM_GLUTWINDOWCONTEXT_LIBRARIES})

 - @ref textured-triangle/configure.h.cmake
 - @ref textured-triangle/CMakeLists.txt

- Next example: @ref examples-cubemap

*/
}
