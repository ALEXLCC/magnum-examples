/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013 Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page examples-textured-triangle Textured triangle
@brief Texturing, custom shaders, compiled-in resources, shader uniforms and mesh tools.

- Previous example: @ref examples-primitives
- Next example: @ref examples-viewer

@image html textured-triangle/textured-triangle.png
@image latex textured-triangle/textured-triangle.png

@tableofcontents

This example extends the basic @ref examples-triangle "Triangle example" with
these features:
 - Working with textures and using Corrade::PluginManager::Manager to load
   Trade::TgaImporter::TgaImporter for importing image data.
 - Creating custom shaders.
 - Storing resources in the executable using Corrade::Utility::Resource, so
   they don't have to be carried as separate files.
 - Using MeshTools for easier creation of mesh data.

@section examples-textured-triangle-setup Setting up and loading the texture

The basic skeleton of main example class remains similar to previous example,
except for added texture.
@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip class TexturedTriangle
@until };

In the constructor we now have two data arrays - one containing all vertex
positions and the other containing texture coordinates. We then use
MeshTools::interleave() which interleaves them together (first position, then
texture coordinates) and fills the buffer with the result. You may think that
is is possible to have them interleaved from the beginning (such as using
array of floats), but sometimes it is inconvenient or not possible (e.g. when
loading the data from a file).
@skip TexturedTriangleExample::TexturedTriangleExample
@until textureCoordinates);

We then configure mesh primitive and vertex yount, add our vertex buffer and
specify attribute locations for use with our shader:
@skipline mesh
@until addVertexBuffer

Now we will instantiate the plugin manager with plugin directory, which is
provided by CMake in `MAGNUM_PLUGINS_IMPORTER_DIR` (explained later) and try
to load TgaImporter plugin. If the plugin cannot be loaded or instantiated, we
print error message and exit immediately.
@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip PluginManager::Manager
@until }

Now we need to load the texture. As advertised above, the texture is stored
as resource in the executable. The resource data will be compiled into source
file using CMake later. We access the resource and load the texture image
using the plugin:
@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip Utility::Resource
@until }

After the image is loaded, we create texture from it. Note that we have to
explicitly set all texture parameters, otherwise the texture will be
incomplete.
@skip std::optional<Trade::ImageData2D>
@until }
@note Setters in most %Magnum classes are implemented in a way which allows
    @ref method-chaining "method chaining" - so you don't have to write repeated
    code.

The drawing function is again fairly simple. We clear the buffer, set base
color to light red, mark the shader for usage and bind texture to the desired
layer (defined in `TexturedTriangleShader`, which is explained later) and
perform the drawing. Last thing is again buffer swap.
@skip TexturedTriangleExample::drawEvent
@until }
@until }

 - @ref textured-triangle/TexturedTriangleExample.cpp

@section examples-textured-triangle-shader Textured triangle shader

Our shader is pretty simple - it takes only vertex position and two-dimensional
texture coordinates. Next to these two attributes it now also needs uniform
for base color and texture layer. We define both attributes with proper types
(i.e., the same types we used for the mesh data earlier) and assign vertex
position to location zero and texture coordinates to location one. For the
color uniform we provide public setter function, texture layer uniform will be
set to fixed value specified with `TextureLayer` constant. Good practice is to
allow @ref method-chaining "method chaining" on uniform setters.
@dontinclude textured-triangle/TexturedTriangleShader.h
@skip class TexturedTriangleShader
@until };
@until };

In the constructor we load GLSL sources from compiled-in resources, compile and
attach them and link the program together. Note that we explicitly check for
compilation and link status. It's better to exit the program instead of leaving
it in undefined state. We then retrieve location for the base color uniform.
Then we set texture layer uniform to fixed value, so it doesn't have to be set
manually when using the shader for rendering. With OpenGL 4.2 we can also set
it explicitly inside the shader itself, see @ref AbstractShaderProgram-texture-layer.
@dontinclude textured-triangle/TexturedTriangleShader.cpp
@skip TexturedTriangleShader::TexturedTriangleShader
@until }

 - @ref textured-triangle/TexturedTriangleShader.h
 - @ref textured-triangle/TexturedTriangleShader.cpp
 - @ref textured-triangle/TexturedTriangleShader.vert
 - @ref textured-triangle/TexturedTriangleShader.frag

@section examples-textured-triangle-compilation Compilation

Compilation is not as straightforward as in previous example, because we need
to get directory with importer plugins and compile the resources into
executable.

@dontinclude textured-triangle/CMakeLists.txt
@skip find_package
@until include_directories

First we find required %Magnum package and use its include dir. We also need
to include current binary dir, because it will contain our generated
`configure.h`. We create it from template `configure.h.cmake` with these
contents:

@dontinclude textured-triangle/configure.h.cmake
@skipline #define

We then process it with CMake, which will replace
`${MAGNUM_PLUGINS_IMPORTER_DIR}` with path gathered when looking for %Magnum.

@dontinclude textured-triangle/CMakeLists.txt
@skip configure_file
@until ${CMAKE_CURRENT_BINARY_DIR}/configure.h

Now we compile the resources into the executable. First we create file
describing listing the resources and then we compile it using
`corrade_add_resource()` macro. Important thing is to use the same resource
name as when we were accessing them above (`data`). Then we create executable
from the result and other source files. Last step is linking, the same as
previously.

@include textured-triangle/resources.conf

@dontinclude textured-triangle/CMakeLists.txt
@skip corrade_add_resource
@until ${MAGNUM_GLUTAPPLICATION_LIBRARIES})

- @ref textured-triangle/configure.h.cmake
- @ref textured-triangle/resources.conf
- @ref textured-triangle/CMakeLists.txt

- Next example: @ref examples-viewer

*/
}
