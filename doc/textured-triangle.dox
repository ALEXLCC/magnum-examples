/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page examples-textured-triangle Textured triangle
@brief Importing image data, texturing and custom shaders.

- Previous example: @ref examples-primitives
- Next example: @ref examples-viewer

@image html textured-triangle/textured-triangle.png
@image latex textured-triangle/textured-triangle.png

@tableofcontents

This example extends the basic @ref examples-triangle "Triangle example" with
these features:
-   Working with textures and using plugin manager for importing TGA image
    data.
-   Creating custom shaders.
-   Storing resources in the executable, so they don't have to be carried as
    separate files along the application.

@section examples-textured-triangle-setup Setting up and loading the texture

The basic skeleton of main example class is similar to the original triangle
example, except for added @ref Texture2D.
@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip class TexturedTriangle
@until };

In the constructor we will cheat again and use @ref Vector2 for both 2D vertex
positions and 2D texture coordinates:
@skip TexturedTriangleExample::TexturedTriangleExample
@until };

We then fill the buffer, configure mesh primitive and vertex count, and specify
attribute locations in the buffer for use with our shader:
@skipline buffer
@until addVertexBuffer

Now we will instantiate the plugin manager and try to load `TgaImporter`
plugin. If the plugin cannot be loaded or instantiated, we print error message
and exit immediately. You can read more about plugin directory locations and
plugin loading in @ref plugins.
@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip PluginManager::Manager
@until CORRADE_INTERNAL_ASSERT

Now we need to load the texture. As advertised above, the texture is stored
as resource in the executable. The resource data will be compiled into source
file using CMake later. We now just access the resource and load the texture
image using the plugin. You can read more about compiled-in resources in
%Corrade's @ref resource-management "resource management tutorial".
@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip Utility::Resource
@until }

After the image is loaded, we create texture from it. Note that we have to
explicitly set all texture parameters, otherwise the texture will be
incomplete.
@skip std::optional<Trade::ImageData2D>
@until }

The drawing function is again fairly simple. We clear the buffer, set base
color to light red, set the texture and perform the drawing. Last thing is
again buffer swap.
@skip TexturedTriangleExample::drawEvent
@until }
@until }

 - @ref textured-triangle/TexturedTriangleExample.cpp

@section examples-textured-triangle-shader Textured triangle shader

Our shader is pretty simple. It's practically a stripped version of textured
@ref Shaders::Flat2D, written for OpenGL 3.3 without bothering about backwards
compatibility. The shader takes 2D vertex position and 2D texture coordinates.
We define both attributes with proper type (i.e., the same type we used for the
mesh data earlier) and assign vertex position to location zero and
texture coordinates to location one. Next to these two attributes it also needs
uniform for base color and function for binding the texture. We will provide
convenience public API for setting these two parameters. Good practice is to
allow @ref method-chaining "method chaining" on them.
@dontinclude textured-triangle/TexturedTriangleShader.h
@skip class TexturedTriangleShader
@until };
@until };

In the constructor we load GLSL sources from compiled-in resources, compile and
attach them and link the program together. Note that we explicitly check for
compilation and link status. It's better to exit the program instead of leaving
it in undefined state. We then retrieve location for the base color uniform.
Then we set texture layer uniform to fixed value, so it doesn't have to be set
manually when using the shader for rendering. We require OpenGL 3.3 in the
shader, so the attribute locations can be conveniently set
@ref AbstractShaderProgram-attribute-location "directly in the shader source".
With newer OpenGL versions we could also explicitly set uniform locations and
texture layers itself, see @ref AbstractShaderProgram-uniform-location and
@ref AbstractShaderProgram-texture-units. However, in this example we will keep
compatibility with OpenGL 3.3.
@dontinclude textured-triangle/TexturedTriangleShader.cpp
@skip TexturedTriangleShader::TexturedTriangleShader
@until }

 - @ref textured-triangle/TexturedTriangleShader.h
 - @ref textured-triangle/TexturedTriangleShader.cpp

The vertex shader just sets the position and passes texture coordinates
through to fragment shader, note the explicit attribute locations:

@dontinclude textured-triangle/TexturedTriangleShader.vert
@skip layout
@until }

Fragment shader loads color from the texture and multiplies it with color we
specified in the uniform:

@dontinclude textured-triangle/TexturedTriangleShader.frag
@skip uniform
@until }

 - @ref textured-triangle/TexturedTriangleShader.vert
 - @ref textured-triangle/TexturedTriangleShader.frag

@section examples-textured-triangle-compilation Compilation

Compilation is not as straightforward as in previous example, because we need
to get directory with importer plugins and compile the resources into
executable.

@dontinclude textured-triangle/CMakeLists.txt
@skip find_package
@until include_directories

First we find required %Magnum package and use its include dir. We also need
to include current binary dir, because it will contain our generated
`configure.h`. We create it from template `configure.h.cmake` with these
contents:

@dontinclude textured-triangle/configure.h.cmake
@skipline #define

-   @ref textured-triangle/configure.h.cmake

We then process it with CMake, which will replace
`${MAGNUM_PLUGINS_IMPORTER_DIR}` with path gathered when looking for %Magnum.
Again, see @ref plugins for more detailed information about plugin directories.

@dontinclude textured-triangle/CMakeLists.txt
@skip configure_file
@until ${CMAKE_CURRENT_BINARY_DIR}/configure.h

Now we compile the resources into the executable. First we create file
describing listing the resources and then we compile it using
@ref corrade-cmake-add-resource "corrade_add_resource()" macro. Important thing
is to use the same resource name as when we were accessing them above (`data`).
As said above, the resource compilation process is explained thoroughly in
%Corrade's @ref resource-management "resource management tutorial".

Then we create executable from the result and other source files. Last step is
linking, the same as previously.

@include textured-triangle/resources.conf

-   @ref textured-triangle/resources.conf

@dontinclude textured-triangle/CMakeLists.txt
@skip corrade_add_resource
@until ${MAGNUM_APPLICATION_LIBRARIES})

-   @ref textured-triangle/CMakeLists.txt

&nbsp;

-   Next example: @ref examples-viewer

*/
}
